# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l-JbelrfdtTmz-gssv9mKoEK6RZFphpT
"""

!gcloud auth application-default login --no-launch-browser

!gcloud config list

!gcloud config set project #_projectID_

from google.auth import default
from vertexai import init

# ‚úÖ Get default Google credentials
credentials, project_id = default()

# ‚úÖ Initialize Vertex AI
init(
    project="",#_projectID_
    location="us-central1",
    credentials=credentials
)

!gcloud auth application-default print-access-token

# Demo one
from vertexai.generative_models import GenerativeModel, Content, Part

# ‚úÖ Initialize Gemini Model
model = GenerativeModel("gemini-2.0-flash-001")

# ‚úÖ Create User Input
user_query = "What is the latest trend in AI?"
contents = [Content(role="user", parts=[Part.from_text(user_query)])]

# ‚úÖ Generate Response
response = model.generate_content(contents=contents)
print(response.text)

import requests
from vertexai.generative_models import GenerativeModel, Content, Part

# ‚úÖ Alpha Vantage API Key
API_KEY = ""  # Replace with your actual API Key

# ‚úÖ Function to Fetch Stock Data
def get_stock_price(symbol):
    """Fetches real-time stock data for the given symbol from Alpha Vantage."""
    url = f"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol={symbol}&interval=5min&apikey={API_KEY}"

    response = requests.get(url)
    data = response.json()

    # Extract stock data
    time_series = data.get("Time Series (5min)", {})

    if not time_series:
        return f"‚ùå No data found for {symbol}. Please check the stock symbol."

    # Get the latest timestamp
    latest_timestamp = max(time_series.keys())
    stock_data = time_series[latest_timestamp]

    return (
        f"üìà Stock Data for {symbol}:\n"
        f"- Open: {stock_data['1. open']}\n"
        f"- High: {stock_data['2. high']}\n"
        f"- Low: {stock_data['3. low']}\n"
        f"- Close: {stock_data['4. close']}\n"
        f"- Volume: {stock_data['5. volume']}\n"
    )

# ‚úÖ Function to Handle AI & Stock Data Retrieval
def gemini_stock_advisor(user_query):
    """Determines whether to fetch stock data or use Gemini AI for insights."""

    words = user_query.split()
    stock_symbol = None

    for word in words:
        if word.isupper() and len(word) <= 5:  # Stock symbols are uppercase
            stock_symbol = word
            break

    # ‚úÖ If stock symbol is detected, fetch stock data
    if stock_symbol:
        return get_stock_price(stock_symbol)

    # ‚úÖ Otherwise, use Gemini AI to generate investment insights
    model = GenerativeModel(
        "gemini-2.0-flash-001",
        generation_config={
            "temperature": 0.7,
            "top_p": 0.95,
            "max_output_tokens": 1024,
            "response_mime_type": "text/plain",
        },
        system_instruction="""üìå Stock Market Assistant:
You provide real-time stock analysis and beginner-friendly investment insights.
Explain trends clearly and avoid complex financial jargon. Always include:
1. üìà Stock Data Summary
2. üí° Investment Advice"""
    )

    contents = [Content(role="user", parts=[Part.from_text(user_query)])]

    response = model.generate_content(contents=contents)
    return response.text

# ‚úÖ Example Queries
print(gemini_stock_advisor("What is IBM's latest stock price?"))  # Fetches stock data
print(gemini_stock_advisor("Should I invest in AAPL?"))  # Gemini AI gives advice
print(gemini_stock_advisor("Tell me about Tesla's stock performance today."))  # Fetches TSLA stock
print(gemini_stock_advisor("How do stock markets work?"))  # Gemini AI explains stock markets